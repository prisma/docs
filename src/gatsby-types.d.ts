/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
  type Maybe<T> = T | null
  type InputMaybe<T> = T | null
  type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
  type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
  type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
  /** All built-in and custom scalars, mapped to their actual values */
  type Scalars = {
    /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
    ID: string
    /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
    String: string
    /** The `Boolean` scalar type represents `true` or `false`. */
    Boolean: boolean
    /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
    Int: number
    /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
    Float: number
    /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    Date: string
    GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: Record<string, unknown>
  }

  type AVIFOptions = {
    readonly lossless: InputMaybe<Scalars['Boolean']>
    readonly quality: InputMaybe<Scalars['Int']>
    readonly speed: InputMaybe<Scalars['Int']>
  }

  type BlurredOptions = {
    /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
    readonly toFormat: InputMaybe<ImageFormat>
    /** Width of the generated low-res preview. Default is 20px */
    readonly width: InputMaybe<Scalars['Int']>
  }

  type BooleanQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Boolean']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>
    readonly ne: InputMaybe<Scalars['Boolean']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>
  }

  type DateQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Date']>
    readonly gt: InputMaybe<Scalars['Date']>
    readonly gte: InputMaybe<Scalars['Date']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>
    readonly lt: InputMaybe<Scalars['Date']>
    readonly lte: InputMaybe<Scalars['Date']>
    readonly ne: InputMaybe<Scalars['Date']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>
  }

  type Directory = Node & {
    readonly absolutePath: Scalars['String']
    readonly accessTime: Scalars['Date']
    readonly atime: Scalars['Date']
    readonly atimeMs: Scalars['Float']
    readonly base: Scalars['String']
    readonly birthTime: Scalars['Date']
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars['Date']>
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars['Float']>
    readonly changeTime: Scalars['Date']
    readonly children: ReadonlyArray<Node>
    readonly ctime: Scalars['Date']
    readonly ctimeMs: Scalars['Float']
    readonly dev: Scalars['Int']
    readonly dir: Scalars['String']
    readonly ext: Scalars['String']
    readonly extension: Scalars['String']
    readonly gid: Scalars['Int']
    readonly id: Scalars['ID']
    readonly ino: Scalars['Float']
    readonly internal: Internal
    readonly mode: Scalars['Int']
    readonly modifiedTime: Scalars['Date']
    readonly mtime: Scalars['Date']
    readonly mtimeMs: Scalars['Float']
    readonly name: Scalars['String']
    readonly nlink: Scalars['Int']
    readonly parent: Maybe<Node>
    readonly prettySize: Scalars['String']
    readonly rdev: Scalars['Int']
    readonly relativeDirectory: Scalars['String']
    readonly relativePath: Scalars['String']
    readonly root: Scalars['String']
    readonly size: Scalars['Int']
    readonly sourceInstanceName: Scalars['String']
    readonly uid: Scalars['Int']
  }

  type Directory_accessTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_atimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_birthTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_changeTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_ctimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_modifiedTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_mtimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type DirectoryConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<DirectoryEdge>
    readonly group: ReadonlyArray<DirectoryGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Directory>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type DirectoryConnection_distinctArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectoryConnection_groupArgs = {
    field: DirectoryFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type DirectoryConnection_maxArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectoryConnection_minArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectoryConnection_sumArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectoryEdge = {
    readonly next: Maybe<Directory>
    readonly node: Directory
    readonly previous: Maybe<Directory>
  }

  type DirectoryFieldsEnum =
    | 'absolutePath'
    | 'accessTime'
    | 'atime'
    | 'atimeMs'
    | 'base'
    | 'birthTime'
    | 'birthtime'
    | 'birthtimeMs'
    | 'changeTime'
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'ctime'
    | 'ctimeMs'
    | 'dev'
    | 'dir'
    | 'ext'
    | 'extension'
    | 'gid'
    | 'id'
    | 'ino'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'mode'
    | 'modifiedTime'
    | 'mtime'
    | 'mtimeMs'
    | 'name'
    | 'nlink'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'prettySize'
    | 'rdev'
    | 'relativeDirectory'
    | 'relativePath'
    | 'root'
    | 'size'
    | 'sourceInstanceName'
    | 'uid'

  type DirectoryFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>
    readonly accessTime: InputMaybe<DateQueryOperatorInput>
    readonly atime: InputMaybe<DateQueryOperatorInput>
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly base: InputMaybe<StringQueryOperatorInput>
    readonly birthTime: InputMaybe<DateQueryOperatorInput>
    readonly birthtime: InputMaybe<DateQueryOperatorInput>
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly changeTime: InputMaybe<DateQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly ctime: InputMaybe<DateQueryOperatorInput>
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly dev: InputMaybe<IntQueryOperatorInput>
    readonly dir: InputMaybe<StringQueryOperatorInput>
    readonly ext: InputMaybe<StringQueryOperatorInput>
    readonly extension: InputMaybe<StringQueryOperatorInput>
    readonly gid: InputMaybe<IntQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly ino: InputMaybe<FloatQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly mode: InputMaybe<IntQueryOperatorInput>
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>
    readonly mtime: InputMaybe<DateQueryOperatorInput>
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly nlink: InputMaybe<IntQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly prettySize: InputMaybe<StringQueryOperatorInput>
    readonly rdev: InputMaybe<IntQueryOperatorInput>
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>
    readonly relativePath: InputMaybe<StringQueryOperatorInput>
    readonly root: InputMaybe<StringQueryOperatorInput>
    readonly size: InputMaybe<IntQueryOperatorInput>
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    readonly uid: InputMaybe<IntQueryOperatorInput>
  }

  type DirectoryGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<DirectoryEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<DirectoryGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Directory>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type DirectoryGroupConnection_distinctArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectoryGroupConnection_groupArgs = {
    field: DirectoryFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type DirectoryGroupConnection_maxArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectoryGroupConnection_minArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectoryGroupConnection_sumArgs = {
    field: DirectoryFieldsEnum
  }

  type DirectorySortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type DuotoneGradient = {
    readonly highlight: Scalars['String']
    readonly opacity: InputMaybe<Scalars['Int']>
    readonly shadow: Scalars['String']
  }

  type File = Node & {
    readonly absolutePath: Scalars['String']
    readonly accessTime: Scalars['Date']
    readonly atime: Scalars['Date']
    readonly atimeMs: Scalars['Float']
    readonly base: Scalars['String']
    readonly birthTime: Scalars['Date']
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars['Date']>
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars['Float']>
    readonly blksize: Maybe<Scalars['Int']>
    readonly blocks: Maybe<Scalars['Int']>
    readonly changeTime: Scalars['Date']
    /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
    readonly childImageSharp: Maybe<ImageSharp>
    /** Returns the first child node of type Mdx or null if there are no children of given type on this node */
    readonly childMdx: Maybe<Mdx>
    readonly children: ReadonlyArray<Node>
    /** Returns all children nodes filtered by type ImageSharp */
    readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>
    /** Returns all children nodes filtered by type Mdx */
    readonly childrenMdx: Maybe<ReadonlyArray<Maybe<Mdx>>>
    readonly ctime: Scalars['Date']
    readonly ctimeMs: Scalars['Float']
    readonly dev: Scalars['Int']
    readonly dir: Scalars['String']
    readonly ext: Scalars['String']
    readonly extension: Scalars['String']
    readonly gid: Scalars['Int']
    readonly id: Scalars['ID']
    readonly ino: Scalars['Float']
    readonly internal: Internal
    readonly mode: Scalars['Int']
    readonly modifiedTime: Scalars['Date']
    readonly mtime: Scalars['Date']
    readonly mtimeMs: Scalars['Float']
    readonly name: Scalars['String']
    readonly nlink: Scalars['Int']
    readonly parent: Maybe<Node>
    readonly prettySize: Scalars['String']
    /** Copy file to static directory and return public url to it */
    readonly publicURL: Maybe<Scalars['String']>
    readonly rdev: Scalars['Int']
    readonly relativeDirectory: Scalars['String']
    readonly relativePath: Scalars['String']
    readonly root: Scalars['String']
    readonly size: Scalars['Int']
    readonly sourceInstanceName: Scalars['String']
    readonly uid: Scalars['Int']
  }

  type File_accessTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_atimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_birthTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_changeTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_ctimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_modifiedTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_mtimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type FileConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<FileEdge>
    readonly group: ReadonlyArray<FileGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<File>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type FileConnection_distinctArgs = {
    field: FileFieldsEnum
  }

  type FileConnection_groupArgs = {
    field: FileFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type FileConnection_maxArgs = {
    field: FileFieldsEnum
  }

  type FileConnection_minArgs = {
    field: FileFieldsEnum
  }

  type FileConnection_sumArgs = {
    field: FileFieldsEnum
  }

  type FileEdge = {
    readonly next: Maybe<File>
    readonly node: File
    readonly previous: Maybe<File>
  }

  type FileFieldsEnum =
    | 'absolutePath'
    | 'accessTime'
    | 'atime'
    | 'atimeMs'
    | 'base'
    | 'birthTime'
    | 'birthtime'
    | 'birthtimeMs'
    | 'blksize'
    | 'blocks'
    | 'changeTime'
    | 'childImageSharp.children'
    | 'childImageSharp.children.children'
    | 'childImageSharp.children.children.children'
    | 'childImageSharp.children.children.id'
    | 'childImageSharp.children.id'
    | 'childImageSharp.children.internal.content'
    | 'childImageSharp.children.internal.contentDigest'
    | 'childImageSharp.children.internal.contentFilePath'
    | 'childImageSharp.children.internal.description'
    | 'childImageSharp.children.internal.fieldOwners'
    | 'childImageSharp.children.internal.ignoreType'
    | 'childImageSharp.children.internal.mediaType'
    | 'childImageSharp.children.internal.owner'
    | 'childImageSharp.children.internal.type'
    | 'childImageSharp.children.parent.children'
    | 'childImageSharp.children.parent.id'
    | 'childImageSharp.fixed.aspectRatio'
    | 'childImageSharp.fixed.base64'
    | 'childImageSharp.fixed.height'
    | 'childImageSharp.fixed.originalName'
    | 'childImageSharp.fixed.src'
    | 'childImageSharp.fixed.srcSet'
    | 'childImageSharp.fixed.srcSetWebp'
    | 'childImageSharp.fixed.srcWebp'
    | 'childImageSharp.fixed.tracedSVG'
    | 'childImageSharp.fixed.width'
    | 'childImageSharp.fluid.aspectRatio'
    | 'childImageSharp.fluid.base64'
    | 'childImageSharp.fluid.originalImg'
    | 'childImageSharp.fluid.originalName'
    | 'childImageSharp.fluid.presentationHeight'
    | 'childImageSharp.fluid.presentationWidth'
    | 'childImageSharp.fluid.sizes'
    | 'childImageSharp.fluid.src'
    | 'childImageSharp.fluid.srcSet'
    | 'childImageSharp.fluid.srcSetWebp'
    | 'childImageSharp.fluid.srcWebp'
    | 'childImageSharp.fluid.tracedSVG'
    | 'childImageSharp.gatsbyImageData'
    | 'childImageSharp.id'
    | 'childImageSharp.internal.content'
    | 'childImageSharp.internal.contentDigest'
    | 'childImageSharp.internal.contentFilePath'
    | 'childImageSharp.internal.description'
    | 'childImageSharp.internal.fieldOwners'
    | 'childImageSharp.internal.ignoreType'
    | 'childImageSharp.internal.mediaType'
    | 'childImageSharp.internal.owner'
    | 'childImageSharp.internal.type'
    | 'childImageSharp.original.height'
    | 'childImageSharp.original.src'
    | 'childImageSharp.original.width'
    | 'childImageSharp.parent.children'
    | 'childImageSharp.parent.children.children'
    | 'childImageSharp.parent.children.id'
    | 'childImageSharp.parent.id'
    | 'childImageSharp.parent.internal.content'
    | 'childImageSharp.parent.internal.contentDigest'
    | 'childImageSharp.parent.internal.contentFilePath'
    | 'childImageSharp.parent.internal.description'
    | 'childImageSharp.parent.internal.fieldOwners'
    | 'childImageSharp.parent.internal.ignoreType'
    | 'childImageSharp.parent.internal.mediaType'
    | 'childImageSharp.parent.internal.owner'
    | 'childImageSharp.parent.internal.type'
    | 'childImageSharp.parent.parent.children'
    | 'childImageSharp.parent.parent.id'
    | 'childImageSharp.resize.aspectRatio'
    | 'childImageSharp.resize.height'
    | 'childImageSharp.resize.originalName'
    | 'childImageSharp.resize.src'
    | 'childImageSharp.resize.tracedSVG'
    | 'childImageSharp.resize.width'
    | 'childMdx.body'
    | 'childMdx.children'
    | 'childMdx.children.children'
    | 'childMdx.children.children.children'
    | 'childMdx.children.children.id'
    | 'childMdx.children.id'
    | 'childMdx.children.internal.content'
    | 'childMdx.children.internal.contentDigest'
    | 'childMdx.children.internal.contentFilePath'
    | 'childMdx.children.internal.description'
    | 'childMdx.children.internal.fieldOwners'
    | 'childMdx.children.internal.ignoreType'
    | 'childMdx.children.internal.mediaType'
    | 'childMdx.children.internal.owner'
    | 'childMdx.children.internal.type'
    | 'childMdx.children.parent.children'
    | 'childMdx.children.parent.id'
    | 'childMdx.excerpt'
    | 'childMdx.fields.id'
    | 'childMdx.fields.modSlug'
    | 'childMdx.fields.slug'
    | 'childMdx.fileAbsolutePath'
    | 'childMdx.frontmatter.codeStyle'
    | 'childMdx.frontmatter.dbSwitcher'
    | 'childMdx.frontmatter.description'
    | 'childMdx.frontmatter.duration'
    | 'childMdx.frontmatter.earlyaccess'
    | 'childMdx.frontmatter.experimental'
    | 'childMdx.frontmatter.hiddenPage'
    | 'childMdx.frontmatter.hidePage'
    | 'childMdx.frontmatter.langSwitcher'
    | 'childMdx.frontmatter.metaDescription'
    | 'childMdx.frontmatter.metaDescriptions'
    | 'childMdx.frontmatter.metaTitle'
    | 'childMdx.frontmatter.navTitle'
    | 'childMdx.frontmatter.preview'
    | 'childMdx.frontmatter.search'
    | 'childMdx.frontmatter.staticLink'
    | 'childMdx.frontmatter.techMetaDescriptions'
    | 'childMdx.frontmatter.techMetaDescriptions.name'
    | 'childMdx.frontmatter.techMetaDescriptions.value'
    | 'childMdx.frontmatter.techMetaTitles'
    | 'childMdx.frontmatter.techMetaTitles.name'
    | 'childMdx.frontmatter.techMetaTitles.value'
    | 'childMdx.frontmatter.title'
    | 'childMdx.frontmatter.toc'
    | 'childMdx.frontmatter.tocDepth'
    | 'childMdx.headings'
    | 'childMdx.headings.depth'
    | 'childMdx.headings.value'
    | 'childMdx.html'
    | 'childMdx.id'
    | 'childMdx.internal.content'
    | 'childMdx.internal.contentDigest'
    | 'childMdx.internal.contentFilePath'
    | 'childMdx.internal.description'
    | 'childMdx.internal.fieldOwners'
    | 'childMdx.internal.ignoreType'
    | 'childMdx.internal.mediaType'
    | 'childMdx.internal.owner'
    | 'childMdx.internal.type'
    | 'childMdx.mdxAST'
    | 'childMdx.parent.children'
    | 'childMdx.parent.children.children'
    | 'childMdx.parent.children.id'
    | 'childMdx.parent.id'
    | 'childMdx.parent.internal.content'
    | 'childMdx.parent.internal.contentDigest'
    | 'childMdx.parent.internal.contentFilePath'
    | 'childMdx.parent.internal.description'
    | 'childMdx.parent.internal.fieldOwners'
    | 'childMdx.parent.internal.ignoreType'
    | 'childMdx.parent.internal.mediaType'
    | 'childMdx.parent.internal.owner'
    | 'childMdx.parent.internal.type'
    | 'childMdx.parent.parent.children'
    | 'childMdx.parent.parent.id'
    | 'childMdx.rawBody'
    | 'childMdx.slug'
    | 'childMdx.tableOfContents'
    | 'childMdx.timeToRead'
    | 'childMdx.wordCount.paragraphs'
    | 'childMdx.wordCount.sentences'
    | 'childMdx.wordCount.words'
    | 'children'
    | 'childrenImageSharp'
    | 'childrenImageSharp.children'
    | 'childrenImageSharp.children.children'
    | 'childrenImageSharp.children.children.children'
    | 'childrenImageSharp.children.children.id'
    | 'childrenImageSharp.children.id'
    | 'childrenImageSharp.children.internal.content'
    | 'childrenImageSharp.children.internal.contentDigest'
    | 'childrenImageSharp.children.internal.contentFilePath'
    | 'childrenImageSharp.children.internal.description'
    | 'childrenImageSharp.children.internal.fieldOwners'
    | 'childrenImageSharp.children.internal.ignoreType'
    | 'childrenImageSharp.children.internal.mediaType'
    | 'childrenImageSharp.children.internal.owner'
    | 'childrenImageSharp.children.internal.type'
    | 'childrenImageSharp.children.parent.children'
    | 'childrenImageSharp.children.parent.id'
    | 'childrenImageSharp.fixed.aspectRatio'
    | 'childrenImageSharp.fixed.base64'
    | 'childrenImageSharp.fixed.height'
    | 'childrenImageSharp.fixed.originalName'
    | 'childrenImageSharp.fixed.src'
    | 'childrenImageSharp.fixed.srcSet'
    | 'childrenImageSharp.fixed.srcSetWebp'
    | 'childrenImageSharp.fixed.srcWebp'
    | 'childrenImageSharp.fixed.tracedSVG'
    | 'childrenImageSharp.fixed.width'
    | 'childrenImageSharp.fluid.aspectRatio'
    | 'childrenImageSharp.fluid.base64'
    | 'childrenImageSharp.fluid.originalImg'
    | 'childrenImageSharp.fluid.originalName'
    | 'childrenImageSharp.fluid.presentationHeight'
    | 'childrenImageSharp.fluid.presentationWidth'
    | 'childrenImageSharp.fluid.sizes'
    | 'childrenImageSharp.fluid.src'
    | 'childrenImageSharp.fluid.srcSet'
    | 'childrenImageSharp.fluid.srcSetWebp'
    | 'childrenImageSharp.fluid.srcWebp'
    | 'childrenImageSharp.fluid.tracedSVG'
    | 'childrenImageSharp.gatsbyImageData'
    | 'childrenImageSharp.id'
    | 'childrenImageSharp.internal.content'
    | 'childrenImageSharp.internal.contentDigest'
    | 'childrenImageSharp.internal.contentFilePath'
    | 'childrenImageSharp.internal.description'
    | 'childrenImageSharp.internal.fieldOwners'
    | 'childrenImageSharp.internal.ignoreType'
    | 'childrenImageSharp.internal.mediaType'
    | 'childrenImageSharp.internal.owner'
    | 'childrenImageSharp.internal.type'
    | 'childrenImageSharp.original.height'
    | 'childrenImageSharp.original.src'
    | 'childrenImageSharp.original.width'
    | 'childrenImageSharp.parent.children'
    | 'childrenImageSharp.parent.children.children'
    | 'childrenImageSharp.parent.children.id'
    | 'childrenImageSharp.parent.id'
    | 'childrenImageSharp.parent.internal.content'
    | 'childrenImageSharp.parent.internal.contentDigest'
    | 'childrenImageSharp.parent.internal.contentFilePath'
    | 'childrenImageSharp.parent.internal.description'
    | 'childrenImageSharp.parent.internal.fieldOwners'
    | 'childrenImageSharp.parent.internal.ignoreType'
    | 'childrenImageSharp.parent.internal.mediaType'
    | 'childrenImageSharp.parent.internal.owner'
    | 'childrenImageSharp.parent.internal.type'
    | 'childrenImageSharp.parent.parent.children'
    | 'childrenImageSharp.parent.parent.id'
    | 'childrenImageSharp.resize.aspectRatio'
    | 'childrenImageSharp.resize.height'
    | 'childrenImageSharp.resize.originalName'
    | 'childrenImageSharp.resize.src'
    | 'childrenImageSharp.resize.tracedSVG'
    | 'childrenImageSharp.resize.width'
    | 'childrenMdx'
    | 'childrenMdx.body'
    | 'childrenMdx.children'
    | 'childrenMdx.children.children'
    | 'childrenMdx.children.children.children'
    | 'childrenMdx.children.children.id'
    | 'childrenMdx.children.id'
    | 'childrenMdx.children.internal.content'
    | 'childrenMdx.children.internal.contentDigest'
    | 'childrenMdx.children.internal.contentFilePath'
    | 'childrenMdx.children.internal.description'
    | 'childrenMdx.children.internal.fieldOwners'
    | 'childrenMdx.children.internal.ignoreType'
    | 'childrenMdx.children.internal.mediaType'
    | 'childrenMdx.children.internal.owner'
    | 'childrenMdx.children.internal.type'
    | 'childrenMdx.children.parent.children'
    | 'childrenMdx.children.parent.id'
    | 'childrenMdx.excerpt'
    | 'childrenMdx.fields.id'
    | 'childrenMdx.fields.modSlug'
    | 'childrenMdx.fields.slug'
    | 'childrenMdx.fileAbsolutePath'
    | 'childrenMdx.frontmatter.codeStyle'
    | 'childrenMdx.frontmatter.dbSwitcher'
    | 'childrenMdx.frontmatter.description'
    | 'childrenMdx.frontmatter.duration'
    | 'childrenMdx.frontmatter.earlyaccess'
    | 'childrenMdx.frontmatter.experimental'
    | 'childrenMdx.frontmatter.hiddenPage'
    | 'childrenMdx.frontmatter.hidePage'
    | 'childrenMdx.frontmatter.langSwitcher'
    | 'childrenMdx.frontmatter.metaDescription'
    | 'childrenMdx.frontmatter.metaDescriptions'
    | 'childrenMdx.frontmatter.metaTitle'
    | 'childrenMdx.frontmatter.navTitle'
    | 'childrenMdx.frontmatter.preview'
    | 'childrenMdx.frontmatter.search'
    | 'childrenMdx.frontmatter.staticLink'
    | 'childrenMdx.frontmatter.techMetaDescriptions'
    | 'childrenMdx.frontmatter.techMetaDescriptions.name'
    | 'childrenMdx.frontmatter.techMetaDescriptions.value'
    | 'childrenMdx.frontmatter.techMetaTitles'
    | 'childrenMdx.frontmatter.techMetaTitles.name'
    | 'childrenMdx.frontmatter.techMetaTitles.value'
    | 'childrenMdx.frontmatter.title'
    | 'childrenMdx.frontmatter.toc'
    | 'childrenMdx.frontmatter.tocDepth'
    | 'childrenMdx.headings'
    | 'childrenMdx.headings.depth'
    | 'childrenMdx.headings.value'
    | 'childrenMdx.html'
    | 'childrenMdx.id'
    | 'childrenMdx.internal.content'
    | 'childrenMdx.internal.contentDigest'
    | 'childrenMdx.internal.contentFilePath'
    | 'childrenMdx.internal.description'
    | 'childrenMdx.internal.fieldOwners'
    | 'childrenMdx.internal.ignoreType'
    | 'childrenMdx.internal.mediaType'
    | 'childrenMdx.internal.owner'
    | 'childrenMdx.internal.type'
    | 'childrenMdx.mdxAST'
    | 'childrenMdx.parent.children'
    | 'childrenMdx.parent.children.children'
    | 'childrenMdx.parent.children.id'
    | 'childrenMdx.parent.id'
    | 'childrenMdx.parent.internal.content'
    | 'childrenMdx.parent.internal.contentDigest'
    | 'childrenMdx.parent.internal.contentFilePath'
    | 'childrenMdx.parent.internal.description'
    | 'childrenMdx.parent.internal.fieldOwners'
    | 'childrenMdx.parent.internal.ignoreType'
    | 'childrenMdx.parent.internal.mediaType'
    | 'childrenMdx.parent.internal.owner'
    | 'childrenMdx.parent.internal.type'
    | 'childrenMdx.parent.parent.children'
    | 'childrenMdx.parent.parent.id'
    | 'childrenMdx.rawBody'
    | 'childrenMdx.slug'
    | 'childrenMdx.tableOfContents'
    | 'childrenMdx.timeToRead'
    | 'childrenMdx.wordCount.paragraphs'
    | 'childrenMdx.wordCount.sentences'
    | 'childrenMdx.wordCount.words'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'ctime'
    | 'ctimeMs'
    | 'dev'
    | 'dir'
    | 'ext'
    | 'extension'
    | 'gid'
    | 'id'
    | 'ino'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'mode'
    | 'modifiedTime'
    | 'mtime'
    | 'mtimeMs'
    | 'name'
    | 'nlink'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'prettySize'
    | 'publicURL'
    | 'rdev'
    | 'relativeDirectory'
    | 'relativePath'
    | 'root'
    | 'size'
    | 'sourceInstanceName'
    | 'uid'

  type FileFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>
    readonly accessTime: InputMaybe<DateQueryOperatorInput>
    readonly atime: InputMaybe<DateQueryOperatorInput>
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly base: InputMaybe<StringQueryOperatorInput>
    readonly birthTime: InputMaybe<DateQueryOperatorInput>
    readonly birthtime: InputMaybe<DateQueryOperatorInput>
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly blksize: InputMaybe<IntQueryOperatorInput>
    readonly blocks: InputMaybe<IntQueryOperatorInput>
    readonly changeTime: InputMaybe<DateQueryOperatorInput>
    readonly childImageSharp: InputMaybe<ImageSharpFilterInput>
    readonly childMdx: InputMaybe<MdxFilterInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>
    readonly childrenMdx: InputMaybe<MdxFilterListInput>
    readonly ctime: InputMaybe<DateQueryOperatorInput>
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly dev: InputMaybe<IntQueryOperatorInput>
    readonly dir: InputMaybe<StringQueryOperatorInput>
    readonly ext: InputMaybe<StringQueryOperatorInput>
    readonly extension: InputMaybe<StringQueryOperatorInput>
    readonly gid: InputMaybe<IntQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly ino: InputMaybe<FloatQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly mode: InputMaybe<IntQueryOperatorInput>
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>
    readonly mtime: InputMaybe<DateQueryOperatorInput>
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly nlink: InputMaybe<IntQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly prettySize: InputMaybe<StringQueryOperatorInput>
    readonly publicURL: InputMaybe<StringQueryOperatorInput>
    readonly rdev: InputMaybe<IntQueryOperatorInput>
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>
    readonly relativePath: InputMaybe<StringQueryOperatorInput>
    readonly root: InputMaybe<StringQueryOperatorInput>
    readonly size: InputMaybe<IntQueryOperatorInput>
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    readonly uid: InputMaybe<IntQueryOperatorInput>
  }

  type FileGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<FileEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<FileGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<File>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type FileGroupConnection_distinctArgs = {
    field: FileFieldsEnum
  }

  type FileGroupConnection_groupArgs = {
    field: FileFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type FileGroupConnection_maxArgs = {
    field: FileFieldsEnum
  }

  type FileGroupConnection_minArgs = {
    field: FileFieldsEnum
  }

  type FileGroupConnection_sumArgs = {
    field: FileFieldsEnum
  }

  type FileSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type FloatQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Float']>
    readonly gt: InputMaybe<Scalars['Float']>
    readonly gte: InputMaybe<Scalars['Float']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>
    readonly lt: InputMaybe<Scalars['Float']>
    readonly lte: InputMaybe<Scalars['Float']>
    readonly ne: InputMaybe<Scalars['Float']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>
  }

  type Frontmatter = {
    readonly codeStyle: Maybe<Scalars['Boolean']>
    readonly dbSwitcher: Maybe<ReadonlyArray<Scalars['String']>>
    readonly duration: Maybe<Scalars['String']>
    readonly earlyaccess: Maybe<Scalars['Boolean']>
    readonly experimental: Maybe<Scalars['Boolean']>
    readonly hidePage: Maybe<Scalars['Boolean']>
    readonly langSwitcher: Maybe<ReadonlyArray<Scalars['String']>>
    readonly metaDescription: Maybe<Scalars['String']>
    readonly metaTitle: Maybe<Scalars['String']>
    readonly navTitle: Maybe<Scalars['String']>
    readonly preview: Maybe<Scalars['Boolean']>
    readonly staticLink: Maybe<Scalars['Boolean']>
    readonly title: Scalars['String']
    readonly toc: Maybe<Scalars['Boolean']>
    readonly tocDepth: Maybe<Scalars['Int']>
  }

  type FrontmatterFilterInput = {
    readonly codeStyle: InputMaybe<BooleanQueryOperatorInput>
    readonly dbSwitcher: InputMaybe<StringQueryOperatorInput>
    readonly duration: InputMaybe<StringQueryOperatorInput>
    readonly earlyaccess: InputMaybe<BooleanQueryOperatorInput>
    readonly experimental: InputMaybe<BooleanQueryOperatorInput>
    readonly hidePage: InputMaybe<BooleanQueryOperatorInput>
    readonly langSwitcher: InputMaybe<StringQueryOperatorInput>
    readonly metaDescription: InputMaybe<StringQueryOperatorInput>
    readonly metaTitle: InputMaybe<StringQueryOperatorInput>
    readonly navTitle: InputMaybe<StringQueryOperatorInput>
    readonly preview: InputMaybe<BooleanQueryOperatorInput>
    readonly staticLink: InputMaybe<BooleanQueryOperatorInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly toc: InputMaybe<BooleanQueryOperatorInput>
    readonly tocDepth: InputMaybe<IntQueryOperatorInput>
  }

  type GatsbyImageDataQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['GatsbyImageData']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>
    readonly ne: InputMaybe<Scalars['GatsbyImageData']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>
  }

  type GatsbyImageFormat = 'auto' | 'avif' | 'jpg' | '' | 'png' | 'webp'

  type GatsbyImageLayout = 'constrained' | 'fixed' | 'fullWidth'

  type GatsbyImagePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG'

  type HeadingsMdx = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'

  type ImageCropFocus = 17 | 0 | 2 | 16 | 1 | 5 | 8 | 3 | 6 | 7 | 4

  type ImageFit = 'contain' | 'cover' | 'fill' | 'inside' | 'outside'

  type ImageFormat = '' | 'avif' | 'jpg' | '' | 'png' | 'webp'

  type ImageLayout = 'constrained' | 'fixed' | 'fullWidth'

  type ImagePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG'

  type ImageSharp = Node & {
    readonly children: ReadonlyArray<Node>
    readonly fixed: Maybe<ImageSharpFixed>
    readonly fluid: Maybe<ImageSharpFluid>
    readonly gatsbyImageData: Scalars['GatsbyImageData']
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly original: Maybe<ImageSharpOriginal>
    readonly parent: Maybe<Node>
    readonly resize: Maybe<ImageSharpResize>
  }

  type ImageSharp_fixedArgs = {
    background?: InputMaybe<Scalars['String']>
    base64Width: InputMaybe<Scalars['Int']>
    cropFocus?: InputMaybe<ImageCropFocus>
    duotone: InputMaybe<DuotoneGradient>
    fit?: InputMaybe<ImageFit>
    grayscale?: InputMaybe<Scalars['Boolean']>
    height: InputMaybe<Scalars['Int']>
    jpegProgressive?: InputMaybe<Scalars['Boolean']>
    jpegQuality: InputMaybe<Scalars['Int']>
    pngCompressionSpeed?: InputMaybe<Scalars['Int']>
    pngQuality: InputMaybe<Scalars['Int']>
    quality: InputMaybe<Scalars['Int']>
    rotate?: InputMaybe<Scalars['Int']>
    toFormat?: InputMaybe<ImageFormat>
    toFormatBase64?: InputMaybe<ImageFormat>
    traceSVG: InputMaybe<Potrace>
    trim?: InputMaybe<Scalars['Float']>
    webpQuality: InputMaybe<Scalars['Int']>
    width: InputMaybe<Scalars['Int']>
  }

  type ImageSharp_fluidArgs = {
    background?: InputMaybe<Scalars['String']>
    base64Width: InputMaybe<Scalars['Int']>
    cropFocus?: InputMaybe<ImageCropFocus>
    duotone: InputMaybe<DuotoneGradient>
    fit?: InputMaybe<ImageFit>
    grayscale?: InputMaybe<Scalars['Boolean']>
    jpegProgressive?: InputMaybe<Scalars['Boolean']>
    jpegQuality: InputMaybe<Scalars['Int']>
    maxHeight: InputMaybe<Scalars['Int']>
    maxWidth: InputMaybe<Scalars['Int']>
    pngCompressionSpeed?: InputMaybe<Scalars['Int']>
    pngQuality: InputMaybe<Scalars['Int']>
    quality: InputMaybe<Scalars['Int']>
    rotate?: InputMaybe<Scalars['Int']>
    sizes?: InputMaybe<Scalars['String']>
    srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
    toFormat?: InputMaybe<ImageFormat>
    toFormatBase64?: InputMaybe<ImageFormat>
    traceSVG: InputMaybe<Potrace>
    trim?: InputMaybe<Scalars['Float']>
    webpQuality: InputMaybe<Scalars['Int']>
  }

  type ImageSharp_gatsbyImageDataArgs = {
    aspectRatio: InputMaybe<Scalars['Float']>
    avifOptions: InputMaybe<AVIFOptions>
    backgroundColor: InputMaybe<Scalars['String']>
    blurredOptions: InputMaybe<BlurredOptions>
    breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
    formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>
    height: InputMaybe<Scalars['Int']>
    jpgOptions: InputMaybe<JPGOptions>
    layout?: InputMaybe<ImageLayout>
    outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>
    placeholder: InputMaybe<ImagePlaceholder>
    pngOptions: InputMaybe<PNGOptions>
    quality: InputMaybe<Scalars['Int']>
    sizes: InputMaybe<Scalars['String']>
    tracedSVGOptions: InputMaybe<Potrace>
    transformOptions: InputMaybe<TransformOptions>
    webpOptions: InputMaybe<WebPOptions>
    width: InputMaybe<Scalars['Int']>
  }

  type ImageSharp_resizeArgs = {
    background?: InputMaybe<Scalars['String']>
    base64?: InputMaybe<Scalars['Boolean']>
    cropFocus?: InputMaybe<ImageCropFocus>
    duotone: InputMaybe<DuotoneGradient>
    fit?: InputMaybe<ImageFit>
    grayscale?: InputMaybe<Scalars['Boolean']>
    height: InputMaybe<Scalars['Int']>
    jpegProgressive?: InputMaybe<Scalars['Boolean']>
    jpegQuality: InputMaybe<Scalars['Int']>
    pngCompressionLevel?: InputMaybe<Scalars['Int']>
    pngCompressionSpeed?: InputMaybe<Scalars['Int']>
    pngQuality: InputMaybe<Scalars['Int']>
    quality: InputMaybe<Scalars['Int']>
    rotate?: InputMaybe<Scalars['Int']>
    toFormat?: InputMaybe<ImageFormat>
    traceSVG: InputMaybe<Potrace>
    trim?: InputMaybe<Scalars['Float']>
    webpQuality: InputMaybe<Scalars['Int']>
    width: InputMaybe<Scalars['Int']>
  }

  type ImageSharpConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<ImageSharpEdge>
    readonly group: ReadonlyArray<ImageSharpGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<ImageSharp>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type ImageSharpConnection_distinctArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpConnection_groupArgs = {
    field: ImageSharpFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type ImageSharpConnection_maxArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpConnection_minArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpConnection_sumArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpEdge = {
    readonly next: Maybe<ImageSharp>
    readonly node: ImageSharp
    readonly previous: Maybe<ImageSharp>
  }

  type ImageSharpFieldsEnum =
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'fixed.aspectRatio'
    | 'fixed.base64'
    | 'fixed.height'
    | 'fixed.originalName'
    | 'fixed.src'
    | 'fixed.srcSet'
    | 'fixed.srcSetWebp'
    | 'fixed.srcWebp'
    | 'fixed.tracedSVG'
    | 'fixed.width'
    | 'fluid.aspectRatio'
    | 'fluid.base64'
    | 'fluid.originalImg'
    | 'fluid.originalName'
    | 'fluid.presentationHeight'
    | 'fluid.presentationWidth'
    | 'fluid.sizes'
    | 'fluid.src'
    | 'fluid.srcSet'
    | 'fluid.srcSetWebp'
    | 'fluid.srcWebp'
    | 'fluid.tracedSVG'
    | 'gatsbyImageData'
    | 'id'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'original.height'
    | 'original.src'
    | 'original.width'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'resize.aspectRatio'
    | 'resize.height'
    | 'resize.originalName'
    | 'resize.src'
    | 'resize.tracedSVG'
    | 'resize.width'

  type ImageSharpFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly fixed: InputMaybe<ImageSharpFixedFilterInput>
    readonly fluid: InputMaybe<ImageSharpFluidFilterInput>
    readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly original: InputMaybe<ImageSharpOriginalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly resize: InputMaybe<ImageSharpResizeFilterInput>
  }

  type ImageSharpFilterListInput = {
    readonly elemMatch: InputMaybe<ImageSharpFilterInput>
  }

  type ImageSharpFixed = {
    readonly aspectRatio: Maybe<Scalars['Float']>
    readonly base64: Maybe<Scalars['String']>
    readonly height: Scalars['Float']
    readonly originalName: Maybe<Scalars['String']>
    readonly src: Scalars['String']
    readonly srcSet: Scalars['String']
    readonly srcSetWebp: Maybe<Scalars['String']>
    readonly srcWebp: Maybe<Scalars['String']>
    readonly tracedSVG: Maybe<Scalars['String']>
    readonly width: Scalars['Float']
  }

  type ImageSharpFixedFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>
    readonly base64: InputMaybe<StringQueryOperatorInput>
    readonly height: InputMaybe<FloatQueryOperatorInput>
    readonly originalName: InputMaybe<StringQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly srcSet: InputMaybe<StringQueryOperatorInput>
    readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>
    readonly srcWebp: InputMaybe<StringQueryOperatorInput>
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>
    readonly width: InputMaybe<FloatQueryOperatorInput>
  }

  type ImageSharpFluid = {
    readonly aspectRatio: Scalars['Float']
    readonly base64: Maybe<Scalars['String']>
    readonly originalImg: Maybe<Scalars['String']>
    readonly originalName: Maybe<Scalars['String']>
    readonly presentationHeight: Scalars['Int']
    readonly presentationWidth: Scalars['Int']
    readonly sizes: Scalars['String']
    readonly src: Scalars['String']
    readonly srcSet: Scalars['String']
    readonly srcSetWebp: Maybe<Scalars['String']>
    readonly srcWebp: Maybe<Scalars['String']>
    readonly tracedSVG: Maybe<Scalars['String']>
  }

  type ImageSharpFluidFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>
    readonly base64: InputMaybe<StringQueryOperatorInput>
    readonly originalImg: InputMaybe<StringQueryOperatorInput>
    readonly originalName: InputMaybe<StringQueryOperatorInput>
    readonly presentationHeight: InputMaybe<IntQueryOperatorInput>
    readonly presentationWidth: InputMaybe<IntQueryOperatorInput>
    readonly sizes: InputMaybe<StringQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly srcSet: InputMaybe<StringQueryOperatorInput>
    readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>
    readonly srcWebp: InputMaybe<StringQueryOperatorInput>
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>
  }

  type ImageSharpGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<ImageSharpEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<ImageSharpGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<ImageSharp>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type ImageSharpGroupConnection_distinctArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpGroupConnection_groupArgs = {
    field: ImageSharpFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type ImageSharpGroupConnection_maxArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpGroupConnection_minArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpGroupConnection_sumArgs = {
    field: ImageSharpFieldsEnum
  }

  type ImageSharpOriginal = {
    readonly height: Maybe<Scalars['Float']>
    readonly src: Maybe<Scalars['String']>
    readonly width: Maybe<Scalars['Float']>
  }

  type ImageSharpOriginalFilterInput = {
    readonly height: InputMaybe<FloatQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly width: InputMaybe<FloatQueryOperatorInput>
  }

  type ImageSharpResize = {
    readonly aspectRatio: Maybe<Scalars['Float']>
    readonly height: Maybe<Scalars['Int']>
    readonly originalName: Maybe<Scalars['String']>
    readonly src: Maybe<Scalars['String']>
    readonly tracedSVG: Maybe<Scalars['String']>
    readonly width: Maybe<Scalars['Int']>
  }

  type ImageSharpResizeFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>
    readonly height: InputMaybe<IntQueryOperatorInput>
    readonly originalName: InputMaybe<StringQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>
    readonly width: InputMaybe<IntQueryOperatorInput>
  }

  type ImageSharpSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type IntQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Int']>
    readonly gt: InputMaybe<Scalars['Int']>
    readonly gte: InputMaybe<Scalars['Int']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
    readonly lt: InputMaybe<Scalars['Int']>
    readonly lte: InputMaybe<Scalars['Int']>
    readonly ne: InputMaybe<Scalars['Int']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
  }

  type Internal = {
    readonly content: Maybe<Scalars['String']>
    readonly contentDigest: Scalars['String']
    readonly contentFilePath: Maybe<Scalars['String']>
    readonly description: Maybe<Scalars['String']>
    readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly ignoreType: Maybe<Scalars['Boolean']>
    readonly mediaType: Maybe<Scalars['String']>
    readonly owner: Scalars['String']
    readonly type: Scalars['String']
  }

  type InternalFilterInput = {
    readonly content: InputMaybe<StringQueryOperatorInput>
    readonly contentDigest: InputMaybe<StringQueryOperatorInput>
    readonly contentFilePath: InputMaybe<StringQueryOperatorInput>
    readonly description: InputMaybe<StringQueryOperatorInput>
    readonly fieldOwners: InputMaybe<StringQueryOperatorInput>
    readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>
    readonly mediaType: InputMaybe<StringQueryOperatorInput>
    readonly owner: InputMaybe<StringQueryOperatorInput>
    readonly type: InputMaybe<StringQueryOperatorInput>
  }

  type JPGOptions = {
    readonly progressive: InputMaybe<Scalars['Boolean']>
    readonly quality: InputMaybe<Scalars['Int']>
  }

  type JSONQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['JSON']>
    readonly glob: InputMaybe<Scalars['JSON']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>
    readonly ne: InputMaybe<Scalars['JSON']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>
    readonly regex: InputMaybe<Scalars['JSON']>
  }

  type MarkdownRemark = Node & {
    readonly children: ReadonlyArray<Node>
    readonly frontmatter: Maybe<Frontmatter>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
  }

  type MarkdownRemarkConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<MarkdownRemarkEdge>
    readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<MarkdownRemark>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type MarkdownRemarkConnection_distinctArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkConnection_groupArgs = {
    field: MarkdownRemarkFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type MarkdownRemarkConnection_maxArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkConnection_minArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkConnection_sumArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkEdge = {
    readonly next: Maybe<MarkdownRemark>
    readonly node: MarkdownRemark
    readonly previous: Maybe<MarkdownRemark>
  }

  type MarkdownRemarkFieldsEnum =
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'frontmatter.codeStyle'
    | 'frontmatter.dbSwitcher'
    | 'frontmatter.duration'
    | 'frontmatter.earlyaccess'
    | 'frontmatter.experimental'
    | 'frontmatter.hidePage'
    | 'frontmatter.langSwitcher'
    | 'frontmatter.metaDescription'
    | 'frontmatter.metaTitle'
    | 'frontmatter.navTitle'
    | 'frontmatter.preview'
    | 'frontmatter.staticLink'
    | 'frontmatter.title'
    | 'frontmatter.toc'
    | 'frontmatter.tocDepth'
    | 'id'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'

  type MarkdownRemarkFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly frontmatter: InputMaybe<FrontmatterFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
  }

  type MarkdownRemarkGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<MarkdownRemarkEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<MarkdownRemark>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type MarkdownRemarkGroupConnection_distinctArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkGroupConnection_groupArgs = {
    field: MarkdownRemarkFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type MarkdownRemarkGroupConnection_maxArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkGroupConnection_minArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkGroupConnection_sumArgs = {
    field: MarkdownRemarkFieldsEnum
  }

  type MarkdownRemarkSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type Mdx = Node & {
    readonly body: Scalars['String']
    readonly children: ReadonlyArray<Node>
    readonly excerpt: Scalars['String']
    readonly fields: Maybe<MdxFields>
    readonly fileAbsolutePath: Scalars['String']
    readonly frontmatter: Maybe<MdxFrontmatter>
    readonly headings: Maybe<ReadonlyArray<Maybe<MdxHeadingMdx>>>
    readonly html: Maybe<Scalars['String']>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly mdxAST: Maybe<Scalars['JSON']>
    readonly parent: Maybe<Node>
    readonly rawBody: Scalars['String']
    readonly slug: Maybe<Scalars['String']>
    readonly tableOfContents: Maybe<Scalars['JSON']>
    readonly timeToRead: Maybe<Scalars['Int']>
    readonly wordCount: Maybe<MdxWordCount>
  }

  type Mdx_excerptArgs = {
    pruneLength?: InputMaybe<Scalars['Int']>
    truncate?: InputMaybe<Scalars['Boolean']>
  }

  type Mdx_headingsArgs = {
    depth: InputMaybe<HeadingsMdx>
  }

  type Mdx_tableOfContentsArgs = {
    maxDepth: InputMaybe<Scalars['Int']>
  }

  type MdxConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<MdxEdge>
    readonly group: ReadonlyArray<MdxGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Mdx>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type MdxConnection_distinctArgs = {
    field: MdxFieldsEnum
  }

  type MdxConnection_groupArgs = {
    field: MdxFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type MdxConnection_maxArgs = {
    field: MdxFieldsEnum
  }

  type MdxConnection_minArgs = {
    field: MdxFieldsEnum
  }

  type MdxConnection_sumArgs = {
    field: MdxFieldsEnum
  }

  type MdxEdge = {
    readonly next: Maybe<Mdx>
    readonly node: Mdx
    readonly previous: Maybe<Mdx>
  }

  type MdxFields = {
    readonly id: Maybe<Scalars['String']>
    readonly modSlug: Maybe<Scalars['String']>
    readonly slug: Maybe<Scalars['String']>
  }

  type MdxFieldsEnum =
    | 'body'
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'excerpt'
    | 'fields.id'
    | 'fields.modSlug'
    | 'fields.slug'
    | 'fileAbsolutePath'
    | 'frontmatter.codeStyle'
    | 'frontmatter.dbSwitcher'
    | 'frontmatter.description'
    | 'frontmatter.duration'
    | 'frontmatter.earlyaccess'
    | 'frontmatter.experimental'
    | 'frontmatter.hiddenPage'
    | 'frontmatter.hidePage'
    | 'frontmatter.langSwitcher'
    | 'frontmatter.metaDescription'
    | 'frontmatter.metaDescriptions'
    | 'frontmatter.metaTitle'
    | 'frontmatter.navTitle'
    | 'frontmatter.preview'
    | 'frontmatter.search'
    | 'frontmatter.staticLink'
    | 'frontmatter.techMetaDescriptions'
    | 'frontmatter.techMetaDescriptions.name'
    | 'frontmatter.techMetaDescriptions.value'
    | 'frontmatter.techMetaTitles'
    | 'frontmatter.techMetaTitles.name'
    | 'frontmatter.techMetaTitles.value'
    | 'frontmatter.title'
    | 'frontmatter.toc'
    | 'frontmatter.tocDepth'
    | 'headings'
    | 'headings.depth'
    | 'headings.value'
    | 'html'
    | 'id'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'mdxAST'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'rawBody'
    | 'slug'
    | 'tableOfContents'
    | 'timeToRead'
    | 'wordCount.paragraphs'
    | 'wordCount.sentences'
    | 'wordCount.words'

  type MdxFieldsFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly modSlug: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
  }

  type MdxFilterInput = {
    readonly body: InputMaybe<StringQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly excerpt: InputMaybe<StringQueryOperatorInput>
    readonly fields: InputMaybe<MdxFieldsFilterInput>
    readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>
    readonly frontmatter: InputMaybe<MdxFrontmatterFilterInput>
    readonly headings: InputMaybe<MdxHeadingMdxFilterListInput>
    readonly html: InputMaybe<StringQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly mdxAST: InputMaybe<JSONQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly rawBody: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
    readonly tableOfContents: InputMaybe<JSONQueryOperatorInput>
    readonly timeToRead: InputMaybe<IntQueryOperatorInput>
    readonly wordCount: InputMaybe<MdxWordCountFilterInput>
  }

  type MdxFilterListInput = {
    readonly elemMatch: InputMaybe<MdxFilterInput>
  }

  type MdxFrontmatter = {
    readonly codeStyle: Maybe<Scalars['Boolean']>
    readonly dbSwitcher: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly description: Maybe<Scalars['String']>
    readonly duration: Maybe<Scalars['String']>
    readonly earlyaccess: Maybe<Scalars['Boolean']>
    readonly experimental: Maybe<Scalars['Boolean']>
    readonly hiddenPage: Maybe<Scalars['Boolean']>
    readonly hidePage: Maybe<Scalars['Boolean']>
    readonly langSwitcher: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly metaDescription: Maybe<Scalars['String']>
    readonly metaDescriptions: Maybe<Scalars['String']>
    readonly metaTitle: Maybe<Scalars['String']>
    readonly navTitle: Maybe<Scalars['String']>
    readonly preview: Maybe<Scalars['Boolean']>
    readonly search: Maybe<Scalars['Boolean']>
    readonly staticLink: Maybe<Scalars['Boolean']>
    readonly techMetaDescriptions: Maybe<ReadonlyArray<Maybe<MdxFrontmatterTechMetaDescriptions>>>
    readonly techMetaTitles: Maybe<ReadonlyArray<Maybe<MdxFrontmatterTechMetaTitles>>>
    readonly title: Scalars['String']
    readonly toc: Maybe<Scalars['Boolean']>
    readonly tocDepth: Maybe<Scalars['Int']>
  }

  type MdxFrontmatterFilterInput = {
    readonly codeStyle: InputMaybe<BooleanQueryOperatorInput>
    readonly dbSwitcher: InputMaybe<StringQueryOperatorInput>
    readonly description: InputMaybe<StringQueryOperatorInput>
    readonly duration: InputMaybe<StringQueryOperatorInput>
    readonly earlyaccess: InputMaybe<BooleanQueryOperatorInput>
    readonly experimental: InputMaybe<BooleanQueryOperatorInput>
    readonly hiddenPage: InputMaybe<BooleanQueryOperatorInput>
    readonly hidePage: InputMaybe<BooleanQueryOperatorInput>
    readonly langSwitcher: InputMaybe<StringQueryOperatorInput>
    readonly metaDescription: InputMaybe<StringQueryOperatorInput>
    readonly metaDescriptions: InputMaybe<StringQueryOperatorInput>
    readonly metaTitle: InputMaybe<StringQueryOperatorInput>
    readonly navTitle: InputMaybe<StringQueryOperatorInput>
    readonly preview: InputMaybe<BooleanQueryOperatorInput>
    readonly search: InputMaybe<BooleanQueryOperatorInput>
    readonly staticLink: InputMaybe<BooleanQueryOperatorInput>
    readonly techMetaDescriptions: InputMaybe<MdxFrontmatterTechMetaDescriptionsFilterListInput>
    readonly techMetaTitles: InputMaybe<MdxFrontmatterTechMetaTitlesFilterListInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly toc: InputMaybe<BooleanQueryOperatorInput>
    readonly tocDepth: InputMaybe<IntQueryOperatorInput>
  }

  type MdxFrontmatterTechMetaDescriptions = {
    readonly name: Maybe<Scalars['String']>
    readonly value: Maybe<Scalars['String']>
  }

  type MdxFrontmatterTechMetaDescriptionsFilterInput = {
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly value: InputMaybe<StringQueryOperatorInput>
  }

  type MdxFrontmatterTechMetaDescriptionsFilterListInput = {
    readonly elemMatch: InputMaybe<MdxFrontmatterTechMetaDescriptionsFilterInput>
  }

  type MdxFrontmatterTechMetaTitles = {
    readonly name: Maybe<Scalars['String']>
    readonly value: Maybe<Scalars['String']>
  }

  type MdxFrontmatterTechMetaTitlesFilterInput = {
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly value: InputMaybe<StringQueryOperatorInput>
  }

  type MdxFrontmatterTechMetaTitlesFilterListInput = {
    readonly elemMatch: InputMaybe<MdxFrontmatterTechMetaTitlesFilterInput>
  }

  type MdxGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<MdxEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<MdxGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Mdx>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type MdxGroupConnection_distinctArgs = {
    field: MdxFieldsEnum
  }

  type MdxGroupConnection_groupArgs = {
    field: MdxFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type MdxGroupConnection_maxArgs = {
    field: MdxFieldsEnum
  }

  type MdxGroupConnection_minArgs = {
    field: MdxFieldsEnum
  }

  type MdxGroupConnection_sumArgs = {
    field: MdxFieldsEnum
  }

  type MdxHeadingMdx = {
    readonly depth: Maybe<Scalars['Int']>
    readonly value: Maybe<Scalars['String']>
  }

  type MdxHeadingMdxFilterInput = {
    readonly depth: InputMaybe<IntQueryOperatorInput>
    readonly value: InputMaybe<StringQueryOperatorInput>
  }

  type MdxHeadingMdxFilterListInput = {
    readonly elemMatch: InputMaybe<MdxHeadingMdxFilterInput>
  }

  type MdxSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MdxFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type MdxWordCount = {
    readonly paragraphs: Maybe<Scalars['Int']>
    readonly sentences: Maybe<Scalars['Int']>
    readonly words: Maybe<Scalars['Int']>
  }

  type MdxWordCountFilterInput = {
    readonly paragraphs: InputMaybe<IntQueryOperatorInput>
    readonly sentences: InputMaybe<IntQueryOperatorInput>
    readonly words: InputMaybe<IntQueryOperatorInput>
  }

  /** Node Interface */
  type Node = {
    readonly children: ReadonlyArray<Node>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
  }

  type NodeFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
  }

  type NodeFilterListInput = {
    readonly elemMatch: InputMaybe<NodeFilterInput>
  }

  type PNGOptions = {
    readonly compressionSpeed: InputMaybe<Scalars['Int']>
    readonly quality: InputMaybe<Scalars['Int']>
  }

  type PageInfo = {
    readonly currentPage: Scalars['Int']
    readonly hasNextPage: Scalars['Boolean']
    readonly hasPreviousPage: Scalars['Boolean']
    readonly itemCount: Scalars['Int']
    readonly pageCount: Scalars['Int']
    readonly perPage: Maybe<Scalars['Int']>
    readonly totalCount: Scalars['Int']
  }

  type Potrace = {
    readonly alphaMax: InputMaybe<Scalars['Float']>
    readonly background: InputMaybe<Scalars['String']>
    readonly blackOnWhite: InputMaybe<Scalars['Boolean']>
    readonly color: InputMaybe<Scalars['String']>
    readonly optCurve: InputMaybe<Scalars['Boolean']>
    readonly optTolerance: InputMaybe<Scalars['Float']>
    readonly threshold: InputMaybe<Scalars['Int']>
    readonly turdSize: InputMaybe<Scalars['Float']>
    readonly turnPolicy: InputMaybe<PotraceTurnPolicy>
  }

  type PotraceTurnPolicy = 'black' | 'left' | 'majority' | 'minority' | 'right' | 'white'

  type Query = {
    readonly allDirectory: DirectoryConnection
    readonly allFile: FileConnection
    readonly allImageSharp: ImageSharpConnection
    readonly allMarkdownRemark: MarkdownRemarkConnection
    readonly allMdx: MdxConnection
    readonly allSite: SiteConnection
    readonly allSiteBuildMetadata: SiteBuildMetadataConnection
    readonly allSiteFunction: SiteFunctionConnection
    readonly allSitePage: SitePageConnection
    readonly allSitePlugin: SitePluginConnection
    readonly directory: Maybe<Directory>
    readonly file: Maybe<File>
    readonly imageSharp: Maybe<ImageSharp>
    readonly markdownRemark: Maybe<MarkdownRemark>
    readonly mdx: Maybe<Mdx>
    readonly site: Maybe<Site>
    readonly siteBuildMetadata: Maybe<SiteBuildMetadata>
    readonly siteFunction: Maybe<SiteFunction>
    readonly sitePage: Maybe<SitePage>
    readonly sitePlugin: Maybe<SitePlugin>
  }

  type Query_allDirectoryArgs = {
    filter: InputMaybe<DirectoryFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<DirectorySortInput>
  }

  type Query_allFileArgs = {
    filter: InputMaybe<FileFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<FileSortInput>
  }

  type Query_allImageSharpArgs = {
    filter: InputMaybe<ImageSharpFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ImageSharpSortInput>
  }

  type Query_allMarkdownRemarkArgs = {
    filter: InputMaybe<MarkdownRemarkFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<MarkdownRemarkSortInput>
  }

  type Query_allMdxArgs = {
    filter: InputMaybe<MdxFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<MdxSortInput>
  }

  type Query_allSiteArgs = {
    filter: InputMaybe<SiteFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<SiteSortInput>
  }

  type Query_allSiteBuildMetadataArgs = {
    filter: InputMaybe<SiteBuildMetadataFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<SiteBuildMetadataSortInput>
  }

  type Query_allSiteFunctionArgs = {
    filter: InputMaybe<SiteFunctionFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<SiteFunctionSortInput>
  }

  type Query_allSitePageArgs = {
    filter: InputMaybe<SitePageFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<SitePageSortInput>
  }

  type Query_allSitePluginArgs = {
    filter: InputMaybe<SitePluginFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<SitePluginSortInput>
  }

  type Query_directoryArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>
    accessTime: InputMaybe<DateQueryOperatorInput>
    atime: InputMaybe<DateQueryOperatorInput>
    atimeMs: InputMaybe<FloatQueryOperatorInput>
    base: InputMaybe<StringQueryOperatorInput>
    birthTime: InputMaybe<DateQueryOperatorInput>
    birthtime: InputMaybe<DateQueryOperatorInput>
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    changeTime: InputMaybe<DateQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    ctime: InputMaybe<DateQueryOperatorInput>
    ctimeMs: InputMaybe<FloatQueryOperatorInput>
    dev: InputMaybe<IntQueryOperatorInput>
    dir: InputMaybe<StringQueryOperatorInput>
    ext: InputMaybe<StringQueryOperatorInput>
    extension: InputMaybe<StringQueryOperatorInput>
    gid: InputMaybe<IntQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    ino: InputMaybe<FloatQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    mode: InputMaybe<IntQueryOperatorInput>
    modifiedTime: InputMaybe<DateQueryOperatorInput>
    mtime: InputMaybe<DateQueryOperatorInput>
    mtimeMs: InputMaybe<FloatQueryOperatorInput>
    name: InputMaybe<StringQueryOperatorInput>
    nlink: InputMaybe<IntQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    prettySize: InputMaybe<StringQueryOperatorInput>
    rdev: InputMaybe<IntQueryOperatorInput>
    relativeDirectory: InputMaybe<StringQueryOperatorInput>
    relativePath: InputMaybe<StringQueryOperatorInput>
    root: InputMaybe<StringQueryOperatorInput>
    size: InputMaybe<IntQueryOperatorInput>
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    uid: InputMaybe<IntQueryOperatorInput>
  }

  type Query_fileArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>
    accessTime: InputMaybe<DateQueryOperatorInput>
    atime: InputMaybe<DateQueryOperatorInput>
    atimeMs: InputMaybe<FloatQueryOperatorInput>
    base: InputMaybe<StringQueryOperatorInput>
    birthTime: InputMaybe<DateQueryOperatorInput>
    birthtime: InputMaybe<DateQueryOperatorInput>
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    blksize: InputMaybe<IntQueryOperatorInput>
    blocks: InputMaybe<IntQueryOperatorInput>
    changeTime: InputMaybe<DateQueryOperatorInput>
    childImageSharp: InputMaybe<ImageSharpFilterInput>
    childMdx: InputMaybe<MdxFilterInput>
    children: InputMaybe<NodeFilterListInput>
    childrenImageSharp: InputMaybe<ImageSharpFilterListInput>
    childrenMdx: InputMaybe<MdxFilterListInput>
    ctime: InputMaybe<DateQueryOperatorInput>
    ctimeMs: InputMaybe<FloatQueryOperatorInput>
    dev: InputMaybe<IntQueryOperatorInput>
    dir: InputMaybe<StringQueryOperatorInput>
    ext: InputMaybe<StringQueryOperatorInput>
    extension: InputMaybe<StringQueryOperatorInput>
    gid: InputMaybe<IntQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    ino: InputMaybe<FloatQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    mode: InputMaybe<IntQueryOperatorInput>
    modifiedTime: InputMaybe<DateQueryOperatorInput>
    mtime: InputMaybe<DateQueryOperatorInput>
    mtimeMs: InputMaybe<FloatQueryOperatorInput>
    name: InputMaybe<StringQueryOperatorInput>
    nlink: InputMaybe<IntQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    prettySize: InputMaybe<StringQueryOperatorInput>
    publicURL: InputMaybe<StringQueryOperatorInput>
    rdev: InputMaybe<IntQueryOperatorInput>
    relativeDirectory: InputMaybe<StringQueryOperatorInput>
    relativePath: InputMaybe<StringQueryOperatorInput>
    root: InputMaybe<StringQueryOperatorInput>
    size: InputMaybe<IntQueryOperatorInput>
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    uid: InputMaybe<IntQueryOperatorInput>
  }

  type Query_imageSharpArgs = {
    children: InputMaybe<NodeFilterListInput>
    fixed: InputMaybe<ImageSharpFixedFilterInput>
    fluid: InputMaybe<ImageSharpFluidFilterInput>
    gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    original: InputMaybe<ImageSharpOriginalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    resize: InputMaybe<ImageSharpResizeFilterInput>
  }

  type Query_markdownRemarkArgs = {
    children: InputMaybe<NodeFilterListInput>
    frontmatter: InputMaybe<FrontmatterFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
  }

  type Query_mdxArgs = {
    body: InputMaybe<StringQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    excerpt: InputMaybe<StringQueryOperatorInput>
    fields: InputMaybe<MdxFieldsFilterInput>
    fileAbsolutePath: InputMaybe<StringQueryOperatorInput>
    frontmatter: InputMaybe<MdxFrontmatterFilterInput>
    headings: InputMaybe<MdxHeadingMdxFilterListInput>
    html: InputMaybe<StringQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    mdxAST: InputMaybe<JSONQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    rawBody: InputMaybe<StringQueryOperatorInput>
    slug: InputMaybe<StringQueryOperatorInput>
    tableOfContents: InputMaybe<JSONQueryOperatorInput>
    timeToRead: InputMaybe<IntQueryOperatorInput>
    wordCount: InputMaybe<MdxWordCountFilterInput>
  }

  type Query_siteArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>
    host: InputMaybe<StringQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    jsxRuntime: InputMaybe<StringQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    pathPrefix: InputMaybe<StringQueryOperatorInput>
    polyfill: InputMaybe<BooleanQueryOperatorInput>
    port: InputMaybe<IntQueryOperatorInput>
    siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>
    trailingSlash: InputMaybe<StringQueryOperatorInput>
  }

  type Query_siteBuildMetadataArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
  }

  type Query_siteFunctionArgs = {
    absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    functionRoute: InputMaybe<StringQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    matchPath: InputMaybe<StringQueryOperatorInput>
    originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>
    originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    pluginName: InputMaybe<StringQueryOperatorInput>
    relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>
  }

  type Query_sitePageArgs = {
    children: InputMaybe<NodeFilterListInput>
    component: InputMaybe<StringQueryOperatorInput>
    componentChunkName: InputMaybe<StringQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    internalComponentName: InputMaybe<StringQueryOperatorInput>
    matchPath: InputMaybe<StringQueryOperatorInput>
    pageContext: InputMaybe<JSONQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    path: InputMaybe<StringQueryOperatorInput>
    pluginCreator: InputMaybe<SitePluginFilterInput>
  }

  type Query_sitePluginArgs = {
    browserAPIs: InputMaybe<StringQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    name: InputMaybe<StringQueryOperatorInput>
    nodeAPIs: InputMaybe<StringQueryOperatorInput>
    packageJson: InputMaybe<JSONQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    pluginFilepath: InputMaybe<StringQueryOperatorInput>
    pluginOptions: InputMaybe<JSONQueryOperatorInput>
    resolve: InputMaybe<StringQueryOperatorInput>
    ssrAPIs: InputMaybe<StringQueryOperatorInput>
    version: InputMaybe<StringQueryOperatorInput>
  }

  type Site = Node & {
    readonly buildTime: Maybe<Scalars['Date']>
    readonly children: ReadonlyArray<Node>
    readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>
    readonly host: Maybe<Scalars['String']>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly jsxRuntime: Maybe<Scalars['String']>
    readonly parent: Maybe<Node>
    readonly pathPrefix: Maybe<Scalars['String']>
    readonly polyfill: Maybe<Scalars['Boolean']>
    readonly port: Maybe<Scalars['Int']>
    readonly siteMetadata: Maybe<SiteSiteMetadata>
    readonly trailingSlash: Maybe<Scalars['String']>
  }

  type Site_buildTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type SiteBuildMetadata = Node & {
    readonly buildTime: Maybe<Scalars['Date']>
    readonly children: ReadonlyArray<Node>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
  }

  type SiteBuildMetadata_buildTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type SiteBuildMetadataConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteBuildMetadata>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteBuildMetadataConnection_distinctArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataConnection_groupArgs = {
    field: SiteBuildMetadataFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteBuildMetadataConnection_maxArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataConnection_minArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataConnection_sumArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataEdge = {
    readonly next: Maybe<SiteBuildMetadata>
    readonly node: SiteBuildMetadata
    readonly previous: Maybe<SiteBuildMetadata>
  }

  type SiteBuildMetadataFieldsEnum =
    | 'buildTime'
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'id'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'

  type SiteBuildMetadataFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
  }

  type SiteBuildMetadataGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteBuildMetadata>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteBuildMetadataGroupConnection_distinctArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataGroupConnection_groupArgs = {
    field: SiteBuildMetadataFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteBuildMetadataGroupConnection_maxArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataGroupConnection_minArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataGroupConnection_sumArgs = {
    field: SiteBuildMetadataFieldsEnum
  }

  type SiteBuildMetadataSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type SiteConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteEdge>
    readonly group: ReadonlyArray<SiteGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Site>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteConnection_distinctArgs = {
    field: SiteFieldsEnum
  }

  type SiteConnection_groupArgs = {
    field: SiteFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteConnection_maxArgs = {
    field: SiteFieldsEnum
  }

  type SiteConnection_minArgs = {
    field: SiteFieldsEnum
  }

  type SiteConnection_sumArgs = {
    field: SiteFieldsEnum
  }

  type SiteEdge = {
    readonly next: Maybe<Site>
    readonly node: Site
    readonly previous: Maybe<Site>
  }

  type SiteFieldsEnum =
    | 'buildTime'
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'graphqlTypegen.generateOnBuild'
    | 'graphqlTypegen.typesOutputPath'
    | 'host'
    | 'id'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'jsxRuntime'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'pathPrefix'
    | 'polyfill'
    | 'port'
    | 'siteMetadata.description'
    | 'siteMetadata.docsLocation'
    | 'siteMetadata.footer.newsletter.text'
    | 'siteMetadata.header.secondLevelHeaderMenuItems'
    | 'siteMetadata.header.secondLevelHeaderMenuItems.bucketName'
    | 'siteMetadata.header.secondLevelHeaderMenuItems.text'
    | 'siteMetadata.header.secondLevelHeaderMenuItems.to'
    | 'siteMetadata.header.secondLevelHeaderMenuItems.type'
    | 'siteMetadata.homepage.GeneralLinkData'
    | 'siteMetadata.homepage.GeneralLinkData.categoryName'
    | 'siteMetadata.homepage.GeneralLinkData.icon'
    | 'siteMetadata.homepage.GeneralLinkData.links'
    | 'siteMetadata.homepage.GuideLinkData'
    | 'siteMetadata.homepage.GuideLinkData.color'
    | 'siteMetadata.homepage.GuideLinkData.content'
    | 'siteMetadata.homepage.GuideLinkData.small'
    | 'siteMetadata.homepage.GuideLinkData.title'
    | 'siteMetadata.homepage.GuideLinkData.url'
    | 'siteMetadata.homepage.GuideText'
    | 'siteMetadata.homepage.MoreUsefulLinks'
    | 'siteMetadata.homepage.MoreUsefulLinks.codeBlock'
    | 'siteMetadata.homepage.MoreUsefulLinks.text'
    | 'siteMetadata.homepage.MoreUsefulLinks.url'
    | 'siteMetadata.homepage.ReferenceLinkData'
    | 'siteMetadata.homepage.ReferenceLinkData.categoryName'
    | 'siteMetadata.homepage.ReferenceLinkData.icon'
    | 'siteMetadata.homepage.ReferenceLinkData.links'
    | 'siteMetadata.homepage.ReferenceLinkData.mainUrl'
    | 'siteMetadata.homepage.ReferenceText'
    | 'siteMetadata.homepage.SummaryLinkData.buttons'
    | 'siteMetadata.homepage.SummaryLinkData.gettingStarted'
    | 'siteMetadata.homepage.SummaryLinkData.git'
    | 'siteMetadata.homepage.SummaryLinkData.readyToRun'
    | 'siteMetadata.homepage.SummaryLinkData.slack'
    | 'siteMetadata.keywords'
    | 'siteMetadata.og.image.alt'
    | 'siteMetadata.og.image.height'
    | 'siteMetadata.og.image.type'
    | 'siteMetadata.og.image.url'
    | 'siteMetadata.og.image.width'
    | 'siteMetadata.og.site_name'
    | 'siteMetadata.og.type'
    | 'siteMetadata.pathPrefix'
    | 'siteMetadata.redirects'
    | 'siteMetadata.redirects.from'
    | 'siteMetadata.redirects.to'
    | 'siteMetadata.siteUrl'
    | 'siteMetadata.title'
    | 'siteMetadata.titlePrefix'
    | 'siteMetadata.titleSuffix'
    | 'siteMetadata.twitter.creator'
    | 'siteMetadata.twitter.image'
    | 'siteMetadata.twitter.site'
    | 'trailingSlash'

  type SiteFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>
    readonly host: InputMaybe<StringQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly pathPrefix: InputMaybe<StringQueryOperatorInput>
    readonly polyfill: InputMaybe<BooleanQueryOperatorInput>
    readonly port: InputMaybe<IntQueryOperatorInput>
    readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>
    readonly trailingSlash: InputMaybe<StringQueryOperatorInput>
  }

  type SiteFunction = Node & {
    readonly absoluteCompiledFilePath: Scalars['String']
    readonly children: ReadonlyArray<Node>
    readonly functionRoute: Scalars['String']
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly matchPath: Maybe<Scalars['String']>
    readonly originalAbsoluteFilePath: Scalars['String']
    readonly originalRelativeFilePath: Scalars['String']
    readonly parent: Maybe<Node>
    readonly pluginName: Scalars['String']
    readonly relativeCompiledFilePath: Scalars['String']
  }

  type SiteFunctionConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteFunctionEdge>
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteFunction>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteFunctionConnection_distinctArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionConnection_groupArgs = {
    field: SiteFunctionFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteFunctionConnection_maxArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionConnection_minArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionConnection_sumArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionEdge = {
    readonly next: Maybe<SiteFunction>
    readonly node: SiteFunction
    readonly previous: Maybe<SiteFunction>
  }

  type SiteFunctionFieldsEnum =
    | 'absoluteCompiledFilePath'
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'functionRoute'
    | 'id'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'matchPath'
    | 'originalAbsoluteFilePath'
    | 'originalRelativeFilePath'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'pluginName'
    | 'relativeCompiledFilePath'

  type SiteFunctionFilterInput = {
    readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly functionRoute: InputMaybe<StringQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly matchPath: InputMaybe<StringQueryOperatorInput>
    readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>
    readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly pluginName: InputMaybe<StringQueryOperatorInput>
    readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>
  }

  type SiteFunctionGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteFunctionEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteFunction>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteFunctionGroupConnection_distinctArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionGroupConnection_groupArgs = {
    field: SiteFunctionFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteFunctionGroupConnection_maxArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionGroupConnection_minArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionGroupConnection_sumArgs = {
    field: SiteFunctionFieldsEnum
  }

  type SiteFunctionSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type SiteGraphqlTypegen = {
    readonly generateOnBuild: Maybe<Scalars['Boolean']>
    readonly typesOutputPath: Maybe<Scalars['String']>
  }

  type SiteGraphqlTypegenFilterInput = {
    readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>
    readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>
  }

  type SiteGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SiteGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Site>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteGroupConnection_distinctArgs = {
    field: SiteFieldsEnum
  }

  type SiteGroupConnection_groupArgs = {
    field: SiteFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteGroupConnection_maxArgs = {
    field: SiteFieldsEnum
  }

  type SiteGroupConnection_minArgs = {
    field: SiteFieldsEnum
  }

  type SiteGroupConnection_sumArgs = {
    field: SiteFieldsEnum
  }

  type SitePage = Node & {
    readonly children: ReadonlyArray<Node>
    readonly component: Scalars['String']
    readonly componentChunkName: Scalars['String']
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly internalComponentName: Scalars['String']
    readonly matchPath: Maybe<Scalars['String']>
    readonly pageContext: Maybe<Scalars['JSON']>
    readonly parent: Maybe<Node>
    readonly path: Scalars['String']
    readonly pluginCreator: Maybe<SitePlugin>
  }

  type SitePageConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePageEdge>
    readonly group: ReadonlyArray<SitePageGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePage>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePageConnection_distinctArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageConnection_groupArgs = {
    field: SitePageFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePageConnection_maxArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageConnection_minArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageConnection_sumArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageEdge = {
    readonly next: Maybe<SitePage>
    readonly node: SitePage
    readonly previous: Maybe<SitePage>
  }

  type SitePageFieldsEnum =
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'component'
    | 'componentChunkName'
    | 'id'
    | 'internalComponentName'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'matchPath'
    | 'pageContext'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'path'
    | 'pluginCreator.browserAPIs'
    | 'pluginCreator.children'
    | 'pluginCreator.children.children'
    | 'pluginCreator.children.children.children'
    | 'pluginCreator.children.children.id'
    | 'pluginCreator.children.id'
    | 'pluginCreator.children.internal.content'
    | 'pluginCreator.children.internal.contentDigest'
    | 'pluginCreator.children.internal.contentFilePath'
    | 'pluginCreator.children.internal.description'
    | 'pluginCreator.children.internal.fieldOwners'
    | 'pluginCreator.children.internal.ignoreType'
    | 'pluginCreator.children.internal.mediaType'
    | 'pluginCreator.children.internal.owner'
    | 'pluginCreator.children.internal.type'
    | 'pluginCreator.children.parent.children'
    | 'pluginCreator.children.parent.id'
    | 'pluginCreator.id'
    | 'pluginCreator.internal.content'
    | 'pluginCreator.internal.contentDigest'
    | 'pluginCreator.internal.contentFilePath'
    | 'pluginCreator.internal.description'
    | 'pluginCreator.internal.fieldOwners'
    | 'pluginCreator.internal.ignoreType'
    | 'pluginCreator.internal.mediaType'
    | 'pluginCreator.internal.owner'
    | 'pluginCreator.internal.type'
    | 'pluginCreator.name'
    | 'pluginCreator.nodeAPIs'
    | 'pluginCreator.packageJson'
    | 'pluginCreator.parent.children'
    | 'pluginCreator.parent.children.children'
    | 'pluginCreator.parent.children.id'
    | 'pluginCreator.parent.id'
    | 'pluginCreator.parent.internal.content'
    | 'pluginCreator.parent.internal.contentDigest'
    | 'pluginCreator.parent.internal.contentFilePath'
    | 'pluginCreator.parent.internal.description'
    | 'pluginCreator.parent.internal.fieldOwners'
    | 'pluginCreator.parent.internal.ignoreType'
    | 'pluginCreator.parent.internal.mediaType'
    | 'pluginCreator.parent.internal.owner'
    | 'pluginCreator.parent.internal.type'
    | 'pluginCreator.parent.parent.children'
    | 'pluginCreator.parent.parent.id'
    | 'pluginCreator.pluginFilepath'
    | 'pluginCreator.pluginOptions'
    | 'pluginCreator.resolve'
    | 'pluginCreator.ssrAPIs'
    | 'pluginCreator.version'

  type SitePageFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly component: InputMaybe<StringQueryOperatorInput>
    readonly componentChunkName: InputMaybe<StringQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly internalComponentName: InputMaybe<StringQueryOperatorInput>
    readonly matchPath: InputMaybe<StringQueryOperatorInput>
    readonly pageContext: InputMaybe<JSONQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly path: InputMaybe<StringQueryOperatorInput>
    readonly pluginCreator: InputMaybe<SitePluginFilterInput>
  }

  type SitePageGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePageEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SitePageGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePage>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePageGroupConnection_distinctArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageGroupConnection_groupArgs = {
    field: SitePageFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePageGroupConnection_maxArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageGroupConnection_minArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageGroupConnection_sumArgs = {
    field: SitePageFieldsEnum
  }

  type SitePageSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type SitePlugin = Node & {
    readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly children: ReadonlyArray<Node>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly name: Maybe<Scalars['String']>
    readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly packageJson: Maybe<Scalars['JSON']>
    readonly parent: Maybe<Node>
    readonly pluginFilepath: Maybe<Scalars['String']>
    readonly pluginOptions: Maybe<Scalars['JSON']>
    readonly resolve: Maybe<Scalars['String']>
    readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly version: Maybe<Scalars['String']>
  }

  type SitePluginConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePluginEdge>
    readonly group: ReadonlyArray<SitePluginGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePlugin>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePluginConnection_distinctArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginConnection_groupArgs = {
    field: SitePluginFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePluginConnection_maxArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginConnection_minArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginConnection_sumArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginEdge = {
    readonly next: Maybe<SitePlugin>
    readonly node: SitePlugin
    readonly previous: Maybe<SitePlugin>
  }

  type SitePluginFieldsEnum =
    | 'browserAPIs'
    | 'children'
    | 'children.children'
    | 'children.children.children'
    | 'children.children.children.children'
    | 'children.children.children.id'
    | 'children.children.id'
    | 'children.children.internal.content'
    | 'children.children.internal.contentDigest'
    | 'children.children.internal.contentFilePath'
    | 'children.children.internal.description'
    | 'children.children.internal.fieldOwners'
    | 'children.children.internal.ignoreType'
    | 'children.children.internal.mediaType'
    | 'children.children.internal.owner'
    | 'children.children.internal.type'
    | 'children.children.parent.children'
    | 'children.children.parent.id'
    | 'children.id'
    | 'children.internal.content'
    | 'children.internal.contentDigest'
    | 'children.internal.contentFilePath'
    | 'children.internal.description'
    | 'children.internal.fieldOwners'
    | 'children.internal.ignoreType'
    | 'children.internal.mediaType'
    | 'children.internal.owner'
    | 'children.internal.type'
    | 'children.parent.children'
    | 'children.parent.children.children'
    | 'children.parent.children.id'
    | 'children.parent.id'
    | 'children.parent.internal.content'
    | 'children.parent.internal.contentDigest'
    | 'children.parent.internal.contentFilePath'
    | 'children.parent.internal.description'
    | 'children.parent.internal.fieldOwners'
    | 'children.parent.internal.ignoreType'
    | 'children.parent.internal.mediaType'
    | 'children.parent.internal.owner'
    | 'children.parent.internal.type'
    | 'children.parent.parent.children'
    | 'children.parent.parent.id'
    | 'id'
    | 'internal.content'
    | 'internal.contentDigest'
    | 'internal.contentFilePath'
    | 'internal.description'
    | 'internal.fieldOwners'
    | 'internal.ignoreType'
    | 'internal.mediaType'
    | 'internal.owner'
    | 'internal.type'
    | 'name'
    | 'nodeAPIs'
    | 'packageJson'
    | 'parent.children'
    | 'parent.children.children'
    | 'parent.children.children.children'
    | 'parent.children.children.id'
    | 'parent.children.id'
    | 'parent.children.internal.content'
    | 'parent.children.internal.contentDigest'
    | 'parent.children.internal.contentFilePath'
    | 'parent.children.internal.description'
    | 'parent.children.internal.fieldOwners'
    | 'parent.children.internal.ignoreType'
    | 'parent.children.internal.mediaType'
    | 'parent.children.internal.owner'
    | 'parent.children.internal.type'
    | 'parent.children.parent.children'
    | 'parent.children.parent.id'
    | 'parent.id'
    | 'parent.internal.content'
    | 'parent.internal.contentDigest'
    | 'parent.internal.contentFilePath'
    | 'parent.internal.description'
    | 'parent.internal.fieldOwners'
    | 'parent.internal.ignoreType'
    | 'parent.internal.mediaType'
    | 'parent.internal.owner'
    | 'parent.internal.type'
    | 'parent.parent.children'
    | 'parent.parent.children.children'
    | 'parent.parent.children.id'
    | 'parent.parent.id'
    | 'parent.parent.internal.content'
    | 'parent.parent.internal.contentDigest'
    | 'parent.parent.internal.contentFilePath'
    | 'parent.parent.internal.description'
    | 'parent.parent.internal.fieldOwners'
    | 'parent.parent.internal.ignoreType'
    | 'parent.parent.internal.mediaType'
    | 'parent.parent.internal.owner'
    | 'parent.parent.internal.type'
    | 'parent.parent.parent.children'
    | 'parent.parent.parent.id'
    | 'pluginFilepath'
    | 'pluginOptions'
    | 'resolve'
    | 'ssrAPIs'
    | 'version'

  type SitePluginFilterInput = {
    readonly browserAPIs: InputMaybe<StringQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>
    readonly packageJson: InputMaybe<JSONQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>
    readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>
    readonly resolve: InputMaybe<StringQueryOperatorInput>
    readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>
    readonly version: InputMaybe<StringQueryOperatorInput>
  }

  type SitePluginGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePluginEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SitePluginGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePlugin>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePluginGroupConnection_distinctArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginGroupConnection_groupArgs = {
    field: SitePluginFieldsEnum
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePluginGroupConnection_maxArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginGroupConnection_minArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginGroupConnection_sumArgs = {
    field: SitePluginFieldsEnum
  }

  type SitePluginSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type SiteSiteMetadata = {
    readonly description: Maybe<Scalars['String']>
    readonly docsLocation: Maybe<Scalars['String']>
    readonly footer: Maybe<SiteSiteMetadataFooter>
    readonly header: Maybe<SiteSiteMetadataHeader>
    readonly homepage: Maybe<SiteSiteMetadataHomepage>
    readonly keywords: Maybe<Scalars['String']>
    readonly og: Maybe<SiteSiteMetadataOg>
    readonly pathPrefix: Maybe<Scalars['String']>
    readonly redirects: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataRedirects>>>
    readonly siteUrl: Maybe<Scalars['String']>
    readonly title: Maybe<Scalars['String']>
    readonly titlePrefix: Maybe<Scalars['String']>
    readonly titleSuffix: Maybe<Scalars['String']>
    readonly twitter: Maybe<SiteSiteMetadataTwitter>
  }

  type SiteSiteMetadataFilterInput = {
    readonly description: InputMaybe<StringQueryOperatorInput>
    readonly docsLocation: InputMaybe<StringQueryOperatorInput>
    readonly footer: InputMaybe<SiteSiteMetadataFooterFilterInput>
    readonly header: InputMaybe<SiteSiteMetadataHeaderFilterInput>
    readonly homepage: InputMaybe<SiteSiteMetadataHomepageFilterInput>
    readonly keywords: InputMaybe<StringQueryOperatorInput>
    readonly og: InputMaybe<SiteSiteMetadataOgFilterInput>
    readonly pathPrefix: InputMaybe<StringQueryOperatorInput>
    readonly redirects: InputMaybe<SiteSiteMetadataRedirectsFilterListInput>
    readonly siteUrl: InputMaybe<StringQueryOperatorInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly titlePrefix: InputMaybe<StringQueryOperatorInput>
    readonly titleSuffix: InputMaybe<StringQueryOperatorInput>
    readonly twitter: InputMaybe<SiteSiteMetadataTwitterFilterInput>
  }

  type SiteSiteMetadataFooter = {
    readonly newsletter: Maybe<SiteSiteMetadataFooterNewsletter>
  }

  type SiteSiteMetadataFooterFilterInput = {
    readonly newsletter: InputMaybe<SiteSiteMetadataFooterNewsletterFilterInput>
  }

  type SiteSiteMetadataFooterNewsletter = {
    readonly text: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataFooterNewsletterFilterInput = {
    readonly text: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHeader = {
    readonly secondLevelHeaderMenuItems: Maybe<
      ReadonlyArray<Maybe<SiteSiteMetadataHeaderSecondLevelHeaderMenuItems>>
    >
  }

  type SiteSiteMetadataHeaderFilterInput = {
    readonly secondLevelHeaderMenuItems: InputMaybe<SiteSiteMetadataHeaderSecondLevelHeaderMenuItemsFilterListInput>
  }

  type SiteSiteMetadataHeaderSecondLevelHeaderMenuItems = {
    readonly bucketName: Maybe<Scalars['String']>
    readonly text: Maybe<Scalars['String']>
    readonly to: Maybe<Scalars['String']>
    readonly type: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHeaderSecondLevelHeaderMenuItemsFilterInput = {
    readonly bucketName: InputMaybe<StringQueryOperatorInput>
    readonly text: InputMaybe<StringQueryOperatorInput>
    readonly to: InputMaybe<StringQueryOperatorInput>
    readonly type: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHeaderSecondLevelHeaderMenuItemsFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHeaderSecondLevelHeaderMenuItemsFilterInput>
  }

  type SiteSiteMetadataHomepage = {
    readonly GeneralLinkData: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataHomepageGeneralLinkData>>>
    readonly GuideLinkData: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataHomepageGuideLinkData>>>
    readonly GuideText: Maybe<Scalars['String']>
    readonly MoreUsefulLinks: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataHomepageMoreUsefulLinks>>>
    readonly ReferenceLinkData: Maybe<
      ReadonlyArray<Maybe<SiteSiteMetadataHomepageReferenceLinkData>>
    >
    readonly ReferenceText: Maybe<Scalars['String']>
    readonly SummaryLinkData: Maybe<SiteSiteMetadataHomepageSummaryLinkData>
  }

  type SiteSiteMetadataHomepageFilterInput = {
    readonly GeneralLinkData: InputMaybe<SiteSiteMetadataHomepageGeneralLinkDataFilterListInput>
    readonly GuideLinkData: InputMaybe<SiteSiteMetadataHomepageGuideLinkDataFilterListInput>
    readonly GuideText: InputMaybe<StringQueryOperatorInput>
    readonly MoreUsefulLinks: InputMaybe<SiteSiteMetadataHomepageMoreUsefulLinksFilterListInput>
    readonly ReferenceLinkData: InputMaybe<SiteSiteMetadataHomepageReferenceLinkDataFilterListInput>
    readonly ReferenceText: InputMaybe<StringQueryOperatorInput>
    readonly SummaryLinkData: InputMaybe<SiteSiteMetadataHomepageSummaryLinkDataFilterInput>
  }

  type SiteSiteMetadataHomepageGeneralLinkData = {
    readonly categoryName: Maybe<Scalars['String']>
    readonly icon: Maybe<Scalars['String']>
    readonly links: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataHomepageGeneralLinkDataLinks>>>
  }

  type SiteSiteMetadataHomepageGeneralLinkDataFilterInput = {
    readonly categoryName: InputMaybe<StringQueryOperatorInput>
    readonly icon: InputMaybe<StringQueryOperatorInput>
    readonly links: InputMaybe<SiteSiteMetadataHomepageGeneralLinkDataLinksFilterListInput>
  }

  type SiteSiteMetadataHomepageGeneralLinkDataFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHomepageGeneralLinkDataFilterInput>
  }

  type SiteSiteMetadataHomepageGeneralLinkDataLinks = {
    readonly codeBlock: Maybe<Scalars['Boolean']>
    readonly text: Maybe<Scalars['String']>
    readonly url: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHomepageGeneralLinkDataLinksFilterInput = {
    readonly codeBlock: InputMaybe<BooleanQueryOperatorInput>
    readonly text: InputMaybe<StringQueryOperatorInput>
    readonly url: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHomepageGeneralLinkDataLinksFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHomepageGeneralLinkDataLinksFilterInput>
  }

  type SiteSiteMetadataHomepageGuideLinkData = {
    readonly color: Maybe<Scalars['String']>
    readonly content: Maybe<Scalars['String']>
    readonly small: Maybe<Scalars['Boolean']>
    readonly title: Maybe<Scalars['String']>
    readonly url: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHomepageGuideLinkDataFilterInput = {
    readonly color: InputMaybe<StringQueryOperatorInput>
    readonly content: InputMaybe<StringQueryOperatorInput>
    readonly small: InputMaybe<BooleanQueryOperatorInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly url: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHomepageGuideLinkDataFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHomepageGuideLinkDataFilterInput>
  }

  type SiteSiteMetadataHomepageMoreUsefulLinks = {
    readonly codeBlock: Maybe<Scalars['Boolean']>
    readonly text: Maybe<Scalars['String']>
    readonly url: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHomepageMoreUsefulLinksFilterInput = {
    readonly codeBlock: InputMaybe<BooleanQueryOperatorInput>
    readonly text: InputMaybe<StringQueryOperatorInput>
    readonly url: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHomepageMoreUsefulLinksFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHomepageMoreUsefulLinksFilterInput>
  }

  type SiteSiteMetadataHomepageReferenceLinkData = {
    readonly categoryName: Maybe<Scalars['String']>
    readonly icon: Maybe<Scalars['String']>
    readonly links: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataHomepageReferenceLinkDataLinks>>>
    readonly mainUrl: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHomepageReferenceLinkDataFilterInput = {
    readonly categoryName: InputMaybe<StringQueryOperatorInput>
    readonly icon: InputMaybe<StringQueryOperatorInput>
    readonly links: InputMaybe<SiteSiteMetadataHomepageReferenceLinkDataLinksFilterListInput>
    readonly mainUrl: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHomepageReferenceLinkDataFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHomepageReferenceLinkDataFilterInput>
  }

  type SiteSiteMetadataHomepageReferenceLinkDataLinks = {
    readonly codeBlock: Maybe<Scalars['Boolean']>
    readonly text: Maybe<Scalars['String']>
    readonly url: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHomepageReferenceLinkDataLinksFilterInput = {
    readonly codeBlock: InputMaybe<BooleanQueryOperatorInput>
    readonly text: InputMaybe<StringQueryOperatorInput>
    readonly url: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHomepageReferenceLinkDataLinksFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHomepageReferenceLinkDataLinksFilterInput>
  }

  type SiteSiteMetadataHomepageSummaryLinkData = {
    readonly buttons: Maybe<ReadonlyArray<Maybe<SiteSiteMetadataHomepageSummaryLinkDataButtons>>>
    readonly gettingStarted: Maybe<Scalars['String']>
    readonly git: Maybe<Scalars['String']>
    readonly readyToRun: Maybe<Scalars['String']>
    readonly slack: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHomepageSummaryLinkDataButtons = {
    readonly icon: Maybe<Scalars['String']>
    readonly special: Maybe<Scalars['Boolean']>
    readonly text: Maybe<Scalars['String']>
    readonly url: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataHomepageSummaryLinkDataButtonsFilterInput = {
    readonly icon: InputMaybe<StringQueryOperatorInput>
    readonly special: InputMaybe<BooleanQueryOperatorInput>
    readonly text: InputMaybe<StringQueryOperatorInput>
    readonly url: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataHomepageSummaryLinkDataButtonsFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataHomepageSummaryLinkDataButtonsFilterInput>
  }

  type SiteSiteMetadataHomepageSummaryLinkDataFilterInput = {
    readonly buttons: InputMaybe<SiteSiteMetadataHomepageSummaryLinkDataButtonsFilterListInput>
    readonly gettingStarted: InputMaybe<StringQueryOperatorInput>
    readonly git: InputMaybe<StringQueryOperatorInput>
    readonly readyToRun: InputMaybe<StringQueryOperatorInput>
    readonly slack: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataOg = {
    readonly image: Maybe<SiteSiteMetadataOgImage>
    readonly site_name: Maybe<Scalars['String']>
    readonly type: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataOgFilterInput = {
    readonly image: InputMaybe<SiteSiteMetadataOgImageFilterInput>
    readonly site_name: InputMaybe<StringQueryOperatorInput>
    readonly type: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataOgImage = {
    readonly alt: Maybe<Scalars['String']>
    readonly height: Maybe<Scalars['String']>
    readonly type: Maybe<Scalars['String']>
    readonly url: Maybe<Scalars['String']>
    readonly width: Maybe<Scalars['Date']>
  }

  type SiteSiteMetadataOgImage_widthArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type SiteSiteMetadataOgImageFilterInput = {
    readonly alt: InputMaybe<StringQueryOperatorInput>
    readonly height: InputMaybe<StringQueryOperatorInput>
    readonly type: InputMaybe<StringQueryOperatorInput>
    readonly url: InputMaybe<StringQueryOperatorInput>
    readonly width: InputMaybe<DateQueryOperatorInput>
  }

  type SiteSiteMetadataRedirects = {
    readonly from: Maybe<Scalars['String']>
    readonly to: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataRedirectsFilterInput = {
    readonly from: InputMaybe<StringQueryOperatorInput>
    readonly to: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataRedirectsFilterListInput = {
    readonly elemMatch: InputMaybe<SiteSiteMetadataRedirectsFilterInput>
  }

  type SiteSiteMetadataTwitter = {
    readonly creator: Maybe<Scalars['String']>
    readonly image: Maybe<Scalars['String']>
    readonly site: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataTwitterFilterInput = {
    readonly creator: InputMaybe<StringQueryOperatorInput>
    readonly image: InputMaybe<StringQueryOperatorInput>
    readonly site: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSortInput = {
    readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>
    readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>
  }

  type SortOrderEnum = 'ASC' | 'DESC'

  type StringQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['String']>
    readonly glob: InputMaybe<Scalars['String']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>
    readonly ne: InputMaybe<Scalars['String']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>
    readonly regex: InputMaybe<Scalars['String']>
  }

  type TransformOptions = {
    readonly cropFocus: InputMaybe<ImageCropFocus>
    readonly duotone: InputMaybe<DuotoneGradient>
    readonly fit: InputMaybe<ImageFit>
    readonly grayscale: InputMaybe<Scalars['Boolean']>
    readonly rotate: InputMaybe<Scalars['Int']>
    readonly trim: InputMaybe<Scalars['Float']>
  }

  type WebPOptions = {
    readonly quality: InputMaybe<Scalars['Int']>
  }

  type GatsbyImageSharpFixedFragment = {
    readonly base64: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
  }

  type GatsbyImageSharpFixed_noBase64Fragment = {
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
  }

  type GatsbyImageSharpFixed_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
  }

  type GatsbyImageSharpFixed_withWebpFragment = {
    readonly base64: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
  }

  type GatsbyImageSharpFixed_withWebp_noBase64Fragment = {
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
  }

  type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
  }

  type GatsbyImageSharpFluidFragment = {
    readonly base64: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_noBase64Fragment = {
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_withWebpFragment = {
    readonly base64: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_withWebp_noBase64Fragment = {
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
    readonly sizes: string
  }

  type GatsbyImageSharpFluidLimitPresentationSizeFragment = {
    readonly maxHeight: number
    readonly maxWidth: number
  }

  type HomepageQueryVariables = Exact<{ [key: string]: never }>

  type HomepageQuery = {
    readonly site: {
      readonly siteMetadata: {
        readonly title: string | null
        readonly description: string | null
        readonly homepage: {
          readonly GuideText: string | null
          readonly ReferenceText: string | null
          readonly SummaryLinkData: {
            readonly gettingStarted: string | null
            readonly readyToRun: string | null
            readonly slack: string | null
            readonly git: string | null
            readonly buttons: ReadonlyArray<{
              readonly text: string | null
              readonly url: string | null
              readonly special: boolean | null
              readonly icon: string | null
            } | null> | null
          } | null
          readonly GeneralLinkData: ReadonlyArray<{
            readonly categoryName: string | null
            readonly icon: string | null
            readonly links: ReadonlyArray<{
              readonly url: string | null
              readonly text: string | null
              readonly codeBlock: boolean | null
            } | null> | null
          } | null> | null
          readonly GuideLinkData: ReadonlyArray<{
            readonly title: string | null
            readonly color: string | null
            readonly small: boolean | null
            readonly content: string | null
            readonly url: string | null
          } | null> | null
          readonly ReferenceLinkData: ReadonlyArray<{
            readonly categoryName: string | null
            readonly mainUrl: string | null
            readonly icon: string | null
            readonly links: ReadonlyArray<{
              readonly url: string | null
              readonly text: string | null
              readonly codeBlock: boolean | null
            } | null> | null
          } | null> | null
          readonly MoreUsefulLinks: ReadonlyArray<{
            readonly text: string | null
            readonly url: string | null
            readonly codeBlock: boolean | null
          } | null> | null
        } | null
      } | null
    } | null
  }

  type SEOQueryVariables = Exact<{ [key: string]: never }>

  type SEOQuery = {
    readonly site: {
      readonly siteMetadata: {
        readonly pathPrefix: string | null
        readonly titlePrefix: string | null
        readonly titleSuffix: string | null
        readonly siteUrl: string | null
        readonly twitter: {
          readonly site: string | null
          readonly creator: string | null
          readonly image: string | null
        } | null
        readonly og: {
          readonly site_name: string | null
          readonly type: string | null
          readonly image: {
            readonly url: string | null
            readonly alt: string | null
            readonly type: string | null
            readonly height: string | null
            readonly width: string | null
          } | null
        } | null
      } | null
    } | null
  }

  type SiteTitleQueryQueryVariables = Exact<{ [key: string]: never }>

  type SiteTitleQueryQuery = {
    readonly site: {
      readonly siteMetadata: {
        readonly title: string | null
        readonly footer: { readonly newsletter: { readonly text: string | null } | null } | null
        readonly header: {
          readonly secondLevelHeaderMenuItems: ReadonlyArray<{
            readonly type: string | null
            readonly to: string | null
            readonly bucketName: string | null
            readonly text: string | null
          } | null> | null
        } | null
      } | null
    } | null
  }

  type Unnamed_1_QueryVariables = Exact<{ [key: string]: never }>

  type Unnamed_1_Query = {
    readonly allMdx: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: {
          readonly slug: string | null
          readonly id: string | null
          readonly modSlug: string | null
        } | null
        readonly frontmatter: {
          readonly title: string
          readonly metaTitle: string | null
          readonly metaDescription: string | null
          readonly langSwitcher: ReadonlyArray<string | null> | null
          readonly dbSwitcher: ReadonlyArray<string | null> | null
          readonly techMetaTitles: ReadonlyArray<{
            readonly name: string | null
            readonly value: string | null
          } | null> | null
          readonly techMetaDescriptions: ReadonlyArray<{
            readonly name: string | null
            readonly value: string | null
          } | null> | null
        } | null
        readonly internal: { readonly contentFilePath: string | null }
      }>
    }
    readonly site: {
      readonly siteMetadata: {
        readonly redirects: ReadonlyArray<{
          readonly from: string | null
          readonly to: string | null
        } | null> | null
      } | null
    } | null
  }
}
